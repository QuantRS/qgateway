// This file is generated by rust-protobuf 3.0.3. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/protocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_3;

/// 基础协议
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Request)
pub struct Request {
    // message fields
    // @@protoc_insertion_point(field:Request.command)
    pub command: ::protobuf::EnumOrUnknown<Commands>,
    // @@protoc_insertion_point(field:Request.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "command",
            |m: &Request| { &m.command },
            |m: &mut Request| { &mut m.command },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Request| { &m.data },
            |m: &mut Request| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
            "Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Request {
    const NAME: &'static str = "Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.command = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.command != ::protobuf::EnumOrUnknown::new(Commands::HEARTBEAT) {
            my_size += ::protobuf::rt::int32_size(1, self.command.value());
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.command != ::protobuf::EnumOrUnknown::new(Commands::HEARTBEAT) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.command))?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Request {
        Request::new()
    }

    fn clear(&mut self) {
        self.command = ::protobuf::EnumOrUnknown::new(Commands::HEARTBEAT);
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Request {
        static instance: Request = Request {
            command: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Response)
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:Response.command)
    pub command: ::protobuf::EnumOrUnknown<Commands>,
    // @@protoc_insertion_point(field:Response.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "command",
            |m: &Response| { &m.command },
            |m: &mut Response| { &mut m.command },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Response| { &m.data },
            |m: &mut Response| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.command = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.command != ::protobuf::EnumOrUnknown::new(Commands::HEARTBEAT) {
            my_size += ::protobuf::rt::int32_size(1, self.command.value());
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.command != ::protobuf::EnumOrUnknown::new(Commands::HEARTBEAT) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.command))?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.command = ::protobuf::EnumOrUnknown::new(Commands::HEARTBEAT);
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            command: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  登陆认证
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:LoginRequest)
pub struct LoginRequest {
    // message fields
    // @@protoc_insertion_point(field:LoginRequest.token)
    pub token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:LoginRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LoginRequest {
    fn default() -> &'a LoginRequest {
        <LoginRequest as ::protobuf::Message>::default_instance()
    }
}

impl LoginRequest {
    pub fn new() -> LoginRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &LoginRequest| { &m.token },
            |m: &mut LoginRequest| { &mut m.token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LoginRequest>(
            "LoginRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LoginRequest {
    const NAME: &'static str = "LoginRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LoginRequest {
        LoginRequest::new()
    }

    fn clear(&mut self) {
        self.token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LoginRequest {
        static instance: LoginRequest = LoginRequest {
            token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LoginRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LoginRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LoginRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:LoginResponse)
pub struct LoginResponse {
    // message fields
    // @@protoc_insertion_point(field:LoginResponse.status)
    pub status: bool,
    // special fields
    // @@protoc_insertion_point(special_field:LoginResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LoginResponse {
    fn default() -> &'a LoginResponse {
        <LoginResponse as ::protobuf::Message>::default_instance()
    }
}

impl LoginResponse {
    pub fn new() -> LoginResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &LoginResponse| { &m.status },
            |m: &mut LoginResponse| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LoginResponse>(
            "LoginResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LoginResponse {
    const NAME: &'static str = "LoginResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != false {
            os.write_bool(1, self.status)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LoginResponse {
        LoginResponse::new()
    }

    fn clear(&mut self) {
        self.status = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LoginResponse {
        static instance: LoginResponse = LoginResponse {
            status: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LoginResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LoginResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LoginResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  发送消息
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SendRequest)
pub struct SendRequest {
    // message fields
    // @@protoc_insertion_point(field:SendRequest.token)
    pub token: ::std::string::String,
    // @@protoc_insertion_point(field:SendRequest.key)
    pub key: ::std::string::String,
    // @@protoc_insertion_point(field:SendRequest.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:SendRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SendRequest {
    fn default() -> &'a SendRequest {
        <SendRequest as ::protobuf::Message>::default_instance()
    }
}

impl SendRequest {
    pub fn new() -> SendRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &SendRequest| { &m.token },
            |m: &mut SendRequest| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &SendRequest| { &m.key },
            |m: &mut SendRequest| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &SendRequest| { &m.data },
            |m: &mut SendRequest| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SendRequest>(
            "SendRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SendRequest {
    const NAME: &'static str = "SendRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = is.read_string()?;
                },
                18 => {
                    self.key = is.read_string()?;
                },
                26 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SendRequest {
        SendRequest::new()
    }

    fn clear(&mut self) {
        self.token.clear();
        self.key.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SendRequest {
        static instance: SendRequest = SendRequest {
            token: ::std::string::String::new(),
            key: ::std::string::String::new(),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SendRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SendRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SendRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  订阅请求
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SubscribeRequest)
pub struct SubscribeRequest {
    // message fields
    // @@protoc_insertion_point(field:SubscribeRequest.token)
    pub token: ::std::string::String,
    // @@protoc_insertion_point(field:SubscribeRequest.keys)
    pub keys: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:SubscribeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscribeRequest {
    fn default() -> &'a SubscribeRequest {
        <SubscribeRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeRequest {
    pub fn new() -> SubscribeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &SubscribeRequest| { &m.token },
            |m: &mut SubscribeRequest| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "keys",
            |m: &SubscribeRequest| { &m.keys },
            |m: &mut SubscribeRequest| { &mut m.keys },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscribeRequest>(
            "SubscribeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscribeRequest {
    const NAME: &'static str = "SubscribeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = is.read_string()?;
                },
                18 => {
                    self.keys.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        for v in &self.keys {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscribeRequest {
        SubscribeRequest::new()
    }

    fn clear(&mut self) {
        self.token.clear();
        self.keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscribeRequest {
        static instance: SubscribeRequest = SubscribeRequest {
            token: ::std::string::String::new(),
            keys: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscribeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscribeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscribeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SubscribeResponse)
pub struct SubscribeResponse {
    // message fields
    // @@protoc_insertion_point(field:SubscribeResponse.token)
    pub token: ::std::string::String,
    // @@protoc_insertion_point(field:SubscribeResponse.success)
    pub success: bool,
    // special fields
    // @@protoc_insertion_point(special_field:SubscribeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscribeResponse {
    fn default() -> &'a SubscribeResponse {
        <SubscribeResponse as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeResponse {
    pub fn new() -> SubscribeResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &SubscribeResponse| { &m.token },
            |m: &mut SubscribeResponse| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "success",
            |m: &SubscribeResponse| { &m.success },
            |m: &mut SubscribeResponse| { &mut m.success },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscribeResponse>(
            "SubscribeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscribeResponse {
    const NAME: &'static str = "SubscribeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = is.read_string()?;
                },
                16 => {
                    self.success = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        if self.success != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        if self.success != false {
            os.write_bool(2, self.success)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscribeResponse {
        SubscribeResponse::new()
    }

    fn clear(&mut self) {
        self.token.clear();
        self.success = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscribeResponse {
        static instance: SubscribeResponse = SubscribeResponse {
            token: ::std::string::String::new(),
            success: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscribeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscribeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscribeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  订阅回调
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SubscribeCallback)
pub struct SubscribeCallback {
    // message fields
    // @@protoc_insertion_point(field:SubscribeCallback.token)
    pub token: ::std::string::String,
    // @@protoc_insertion_point(field:SubscribeCallback.key)
    pub key: ::std::string::String,
    // @@protoc_insertion_point(field:SubscribeCallback.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:SubscribeCallback.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscribeCallback {
    fn default() -> &'a SubscribeCallback {
        <SubscribeCallback as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeCallback {
    pub fn new() -> SubscribeCallback {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &SubscribeCallback| { &m.token },
            |m: &mut SubscribeCallback| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &SubscribeCallback| { &m.key },
            |m: &mut SubscribeCallback| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &SubscribeCallback| { &m.data },
            |m: &mut SubscribeCallback| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscribeCallback>(
            "SubscribeCallback",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscribeCallback {
    const NAME: &'static str = "SubscribeCallback";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = is.read_string()?;
                },
                18 => {
                    self.key = is.read_string()?;
                },
                26 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscribeCallback {
        SubscribeCallback::new()
    }

    fn clear(&mut self) {
        self.token.clear();
        self.key.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscribeCallback {
        static instance: SubscribeCallback = SubscribeCallback {
            token: ::std::string::String::new(),
            key: ::std::string::String::new(),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscribeCallback {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscribeCallback").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscribeCallback {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeCallback {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  状态请求
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:StatusRequest)
pub struct StatusRequest {
    // message fields
    // @@protoc_insertion_point(field:StatusRequest.token)
    pub token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:StatusRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StatusRequest {
    fn default() -> &'a StatusRequest {
        <StatusRequest as ::protobuf::Message>::default_instance()
    }
}

impl StatusRequest {
    pub fn new() -> StatusRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &StatusRequest| { &m.token },
            |m: &mut StatusRequest| { &mut m.token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StatusRequest>(
            "StatusRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StatusRequest {
    const NAME: &'static str = "StatusRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StatusRequest {
        StatusRequest::new()
    }

    fn clear(&mut self) {
        self.token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StatusRequest {
        static instance: StatusRequest = StatusRequest {
            token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StatusRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StatusRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StatusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatusRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:StatusResponse)
pub struct StatusResponse {
    // message fields
    // @@protoc_insertion_point(field:StatusResponse.token)
    pub token: ::std::string::String,
    // @@protoc_insertion_point(field:StatusResponse.qps)
    pub qps: i32,
    // @@protoc_insertion_point(field:StatusResponse.connections)
    pub connections: i32,
    // special fields
    // @@protoc_insertion_point(special_field:StatusResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StatusResponse {
    fn default() -> &'a StatusResponse {
        <StatusResponse as ::protobuf::Message>::default_instance()
    }
}

impl StatusResponse {
    pub fn new() -> StatusResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &StatusResponse| { &m.token },
            |m: &mut StatusResponse| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "qps",
            |m: &StatusResponse| { &m.qps },
            |m: &mut StatusResponse| { &mut m.qps },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connections",
            |m: &StatusResponse| { &m.connections },
            |m: &mut StatusResponse| { &mut m.connections },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StatusResponse>(
            "StatusResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StatusResponse {
    const NAME: &'static str = "StatusResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = is.read_string()?;
                },
                16 => {
                    self.qps = is.read_int32()?;
                },
                24 => {
                    self.connections = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        if self.qps != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.qps);
        }
        if self.connections != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.connections);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        if self.qps != 0 {
            os.write_int32(2, self.qps)?;
        }
        if self.connections != 0 {
            os.write_int32(3, self.connections)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StatusResponse {
        StatusResponse::new()
    }

    fn clear(&mut self) {
        self.token.clear();
        self.qps = 0;
        self.connections = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StatusResponse {
        static instance: StatusResponse = StatusResponse {
            token: ::std::string::String::new(),
            qps: 0,
            connections: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StatusResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StatusResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StatusResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatusResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:Commands)
pub enum Commands {
    // @@protoc_insertion_point(enum_value:Commands.HEARTBEAT)
    HEARTBEAT = 0,
    // @@protoc_insertion_point(enum_value:Commands.LOGIN)
    LOGIN = 1,
    // @@protoc_insertion_point(enum_value:Commands.SEND_MESSAGE)
    SEND_MESSAGE = 2,
    // @@protoc_insertion_point(enum_value:Commands.SUBSCRIBE)
    SUBSCRIBE = 3,
    // @@protoc_insertion_point(enum_value:Commands.SUBSCRIBE_CALLBACK)
    SUBSCRIBE_CALLBACK = 4,
    // @@protoc_insertion_point(enum_value:Commands.MESSAGE_STATUS)
    MESSAGE_STATUS = 5,
}

impl ::protobuf::Enum for Commands {
    const NAME: &'static str = "Commands";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Commands> {
        match value {
            0 => ::std::option::Option::Some(Commands::HEARTBEAT),
            1 => ::std::option::Option::Some(Commands::LOGIN),
            2 => ::std::option::Option::Some(Commands::SEND_MESSAGE),
            3 => ::std::option::Option::Some(Commands::SUBSCRIBE),
            4 => ::std::option::Option::Some(Commands::SUBSCRIBE_CALLBACK),
            5 => ::std::option::Option::Some(Commands::MESSAGE_STATUS),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Commands] = &[
        Commands::HEARTBEAT,
        Commands::LOGIN,
        Commands::SEND_MESSAGE,
        Commands::SUBSCRIBE,
        Commands::SUBSCRIBE_CALLBACK,
        Commands::MESSAGE_STATUS,
    ];
}

impl ::protobuf::EnumFull for Commands {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Commands").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Commands {
    fn default() -> Self {
        Commands::HEARTBEAT
    }
}

impl Commands {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Commands>("Commands")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14proto/protocol.proto\"B\n\x07Request\x12#\n\x07command\x18\x01\x20\
    \x01(\x0e2\t.CommandsR\x07command\x12\x12\n\x04data\x18\x02\x20\x01(\x0c\
    R\x04data\"C\n\x08Response\x12#\n\x07command\x18\x01\x20\x01(\x0e2\t.Com\
    mandsR\x07command\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\"$\n\
    \x0cLoginRequest\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\"'\n\rL\
    oginResponse\x12\x16\n\x06status\x18\x01\x20\x01(\x08R\x06status\"I\n\
    \x0bSendRequest\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\x12\x10\
    \n\x03key\x18\x02\x20\x01(\tR\x03key\x12\x12\n\x04data\x18\x03\x20\x01(\
    \x0cR\x04data\"<\n\x10SubscribeRequest\x12\x14\n\x05token\x18\x01\x20\
    \x01(\tR\x05token\x12\x12\n\x04keys\x18\x02\x20\x03(\tR\x04keys\"C\n\x11\
    SubscribeResponse\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\x12\
    \x18\n\x07success\x18\x02\x20\x01(\x08R\x07success\"O\n\x11SubscribeCall\
    back\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\x12\x10\n\x03key\
    \x18\x02\x20\x01(\tR\x03key\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\x04d\
    ata\"%\n\rStatusRequest\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\
    \"Z\n\x0eStatusResponse\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\
    \x12\x10\n\x03qps\x18\x02\x20\x01(\x05R\x03qps\x12\x20\n\x0bconnections\
    \x18\x03\x20\x01(\x05R\x0bconnections*q\n\x08Commands\x12\r\n\tHEARTBEAT\
    \x10\0\x12\t\n\x05LOGIN\x10\x01\x12\x10\n\x0cSEND_MESSAGE\x10\x02\x12\r\
    \n\tSUBSCRIBE\x10\x03\x12\x16\n\x12SUBSCRIBE_CALLBACK\x10\x04\x12\x12\n\
    \x0eMESSAGE_STATUS\x10\x05J\xc9\r\n\x06\x12\x04\0\0=\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\n\n\x02\x05\0\x12\x04\x02\0\t\x01\n\n\n\x03\x05\0\x01\
    \x12\x03\x02\x05\r\n\x0b\n\x04\x05\0\x02\0\x12\x03\x03\x04\x12\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03\x03\x04\r\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\x03\x10\x11\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x04\x04\x0e\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x04\x04\t\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x04\x0c\r\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x05\x04\x15\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03\x05\x04\x10\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03\x05\x13\x14\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x06\x04\x12\n\x0c\
    \n\x05\x05\0\x02\x03\x01\x12\x03\x06\x04\r\n\x0c\n\x05\x05\0\x02\x03\x02\
    \x12\x03\x06\x10\x11\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x07\x04\x1b\n\x0c\
    \n\x05\x05\0\x02\x04\x01\x12\x03\x07\x04\x16\n\x0c\n\x05\x05\0\x02\x04\
    \x02\x12\x03\x07\x19\x1a\n\x0b\n\x04\x05\0\x02\x05\x12\x03\x08\x04\x17\n\
    \x0c\n\x05\x05\0\x02\x05\x01\x12\x03\x08\x04\x12\n\x0c\n\x05\x05\0\x02\
    \x05\x02\x12\x03\x08\x15\x16\n\x19\n\x02\x04\0\x12\x04\x0c\0\x0f\x01\x1a\
    \r\xe5\x9f\xba\xe7\xa1\x80\xe5\x8d\x8f\xe8\xae\xae\n\n\n\n\x03\x04\0\x01\
    \x12\x03\x0c\x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\r\x04\x19\n\x0c\n\
    \x05\x04\0\x02\0\x06\x12\x03\r\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\r\r\x14\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\r\x17\x18\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x0e\x04\x13\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x0e\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0e\n\x0e\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x0e\x11\x12\n\n\n\x02\x04\x01\x12\x04\x10\0\
    \x13\x01\n\n\n\x03\x04\x01\x01\x12\x03\x10\x08\x10\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03\x11\x04\x19\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x11\x04\
    \x0c\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x11\r\x14\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\x11\x17\x18\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x12\
    \x04\x13\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x12\x04\t\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x03\x12\n\x0e\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03\x12\x11\x12\n\x1a\n\x02\x04\x02\x12\x04\x16\0\x18\x01\x1a\x0e\
    \x20\xe7\x99\xbb\xe9\x99\x86\xe8\xae\xa4\xe8\xaf\x81\n\n\n\n\x03\x04\x02\
    \x01\x12\x03\x16\x08\x14\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x17\x04\x15\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x17\x04\n\n\x0c\n\x05\x04\x02\x02\0\
    \x01\x12\x03\x17\x0b\x10\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x17\x13\
    \x14\n\n\n\x02\x04\x03\x12\x04\x19\0\x1b\x01\n\n\n\x03\x04\x03\x01\x12\
    \x03\x19\x08\x15\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1a\x04\x14\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03\x1a\x04\x08\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03\x1a\t\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1a\x12\x13\n\
    \x1a\n\x02\x04\x04\x12\x04\x1e\0\"\x01\x1a\x0e\x20\xe5\x8f\x91\xe9\x80\
    \x81\xe6\xb6\x88\xe6\x81\xaf\n\n\n\n\x03\x04\x04\x01\x12\x03\x1e\x08\x13\
    \n\x0b\n\x04\x04\x04\x02\0\x12\x03\x1f\x04\x15\n\x0c\n\x05\x04\x04\x02\0\
    \x05\x12\x03\x1f\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1f\x0b\x10\
    \n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1f\x13\x14\n\x0b\n\x04\x04\x04\
    \x02\x01\x12\x03\x20\x04\x13\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03\x20\
    \x04\n\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x20\x0b\x0e\n\x0c\n\x05\
    \x04\x04\x02\x01\x03\x12\x03\x20\x11\x12\n\x0b\n\x04\x04\x04\x02\x02\x12\
    \x03!\x04\x13\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03!\x04\t\n\x0c\n\x05\
    \x04\x04\x02\x02\x01\x12\x03!\n\x0e\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\
    \x03!\x11\x12\n\x1a\n\x02\x04\x05\x12\x04%\0(\x01\x1a\x0e\x20\xe8\xae\
    \xa2\xe9\x98\x85\xe8\xaf\xb7\xe6\xb1\x82\n\n\n\n\x03\x04\x05\x01\x12\x03\
    %\x08\x18\n\x0b\n\x04\x04\x05\x02\0\x12\x03&\x04\x15\n\x0c\n\x05\x04\x05\
    \x02\0\x05\x12\x03&\x04\n\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03&\x0b\x10\
    \n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03&\x13\x14\n\x0b\n\x04\x04\x05\x02\
    \x01\x12\x03'\x04\x1d\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03'\x04\x0c\n\
    \x0c\n\x05\x04\x05\x02\x01\x05\x12\x03'\r\x13\n\x0c\n\x05\x04\x05\x02\
    \x01\x01\x12\x03'\x14\x18\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03'\x1b\
    \x1c\n\n\n\x02\x04\x06\x12\x04)\0,\x01\n\n\n\x03\x04\x06\x01\x12\x03)\
    \x08\x19\n\x0b\n\x04\x04\x06\x02\0\x12\x03*\x04\x15\n\x0c\n\x05\x04\x06\
    \x02\0\x05\x12\x03*\x04\n\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03*\x0b\x10\
    \n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03*\x13\x14\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x03+\x04\x15\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03+\x04\x08\n\
    \x0c\n\x05\x04\x06\x02\x01\x01\x12\x03+\t\x10\n\x0c\n\x05\x04\x06\x02\
    \x01\x03\x12\x03+\x13\x14\n\x1a\n\x02\x04\x07\x12\x04/\03\x01\x1a\x0e\
    \x20\xe8\xae\xa2\xe9\x98\x85\xe5\x9b\x9e\xe8\xb0\x83\n\n\n\n\x03\x04\x07\
    \x01\x12\x03/\x08\x19\n\x0b\n\x04\x04\x07\x02\0\x12\x030\x04\x15\n\x0c\n\
    \x05\x04\x07\x02\0\x05\x12\x030\x04\n\n\x0c\n\x05\x04\x07\x02\0\x01\x12\
    \x030\x0b\x10\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x030\x13\x14\n\x0b\n\x04\
    \x04\x07\x02\x01\x12\x031\x04\x13\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\
    \x031\x04\n\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x031\x0b\x0e\n\x0c\n\x05\
    \x04\x07\x02\x01\x03\x12\x031\x11\x12\n\x0b\n\x04\x04\x07\x02\x02\x12\
    \x032\x04\x13\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\x032\x04\t\n\x0c\n\x05\
    \x04\x07\x02\x02\x01\x12\x032\n\x0e\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\
    \x032\x11\x12\n\x1a\n\x02\x04\x08\x12\x046\08\x01\x1a\x0e\x20\xe7\x8a\
    \xb6\xe6\x80\x81\xe8\xaf\xb7\xe6\xb1\x82\n\n\n\n\x03\x04\x08\x01\x12\x03\
    6\x08\x15\n\x0b\n\x04\x04\x08\x02\0\x12\x037\x04\x15\n\x0c\n\x05\x04\x08\
    \x02\0\x05\x12\x037\x04\n\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x037\x0b\x10\
    \n\x0c\n\x05\x04\x08\x02\0\x03\x12\x037\x13\x14\n\n\n\x02\x04\t\x12\x049\
    \0=\x01\n\n\n\x03\x04\t\x01\x12\x039\x08\x16\n\x0b\n\x04\x04\t\x02\0\x12\
    \x03:\x04\x15\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03:\x04\n\n\x0c\n\x05\x04\
    \t\x02\0\x01\x12\x03:\x0b\x10\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03:\x13\
    \x14\n\x0b\n\x04\x04\t\x02\x01\x12\x03;\x04\x12\n\x0c\n\x05\x04\t\x02\
    \x01\x05\x12\x03;\x04\t\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03;\n\r\n\x0c\
    \n\x05\x04\t\x02\x01\x03\x12\x03;\x10\x11\n\x0b\n\x04\x04\t\x02\x02\x12\
    \x03<\x04\x1a\n\x0c\n\x05\x04\t\x02\x02\x05\x12\x03<\x04\t\n\x0c\n\x05\
    \x04\t\x02\x02\x01\x12\x03<\n\x15\n\x0c\n\x05\x04\t\x02\x02\x03\x12\x03<\
    \x18\x19b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(Request::generated_message_descriptor_data());
            messages.push(Response::generated_message_descriptor_data());
            messages.push(LoginRequest::generated_message_descriptor_data());
            messages.push(LoginResponse::generated_message_descriptor_data());
            messages.push(SendRequest::generated_message_descriptor_data());
            messages.push(SubscribeRequest::generated_message_descriptor_data());
            messages.push(SubscribeResponse::generated_message_descriptor_data());
            messages.push(SubscribeCallback::generated_message_descriptor_data());
            messages.push(StatusRequest::generated_message_descriptor_data());
            messages.push(StatusResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(Commands::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
